@page "/scheduler"
@using System.Globalization
@using LandroidWorxApp.BusinessLogic
@using Microsoft.Extensions.Configuration
@using System.Globalization
@using uPLibrary.Networking.M2Mqtt;
@using uPLibrary.Networking.M2Mqtt.Messages;
@using LandroidWorxApp.Components;
@inject ILsClientWeb LsClientWeb
@inject IManager Manager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

<Tabs SelectedTabChanged="OnSelectedTab" IsJustified="true">
    <Tab Name="@DayOfWeek.Monday.ToString()" IsActive="selectedTab == DayOfWeek.Monday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Monday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Tuesday.ToString()" IsActive="selectedTab == DayOfWeek.Tuesday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Tuesday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Wednesday.ToString()" IsActive="selectedTab == DayOfWeek.Wednesday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Wednesday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Thursday.ToString()" IsActive="selectedTab == DayOfWeek.Thursday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Thursday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Friday.ToString()" IsActive="selectedTab == DayOfWeek.Friday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Friday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Saturday.ToString()" IsActive="selectedTab == DayOfWeek.Saturday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Saturday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Sunday.ToString()" IsActive="selectedTab == DayOfWeek.Sunday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Sunday].ToUpper()</Tab>
</Tabs>
<TabsContent @ref="days">
    <TabPanel Name="@DayOfWeek.Monday.ToString()" IsActive="selectedTab == DayOfWeek.Monday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Monday))
        {
            <TimeSchedule Planning="item" Config=config />
        }

    </TabPanel>
    <TabPanel Name="@DayOfWeek.Tuesday.ToString()" IsActive="selectedTab == DayOfWeek.Tuesday">
        <TimeSchedule Config=config />
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Wednesday.ToString()" IsActive="selectedTab == DayOfWeek.Wednesday">
        ---
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Thursday.ToString()" IsActive="selectedTab == DayOfWeek.Thursday">
        òòò
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Friday.ToString()" IsActive="selectedTab == DayOfWeek.Friday">
        òòò
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Saturday.ToString()" IsActive="selectedTab == DayOfWeek.Saturday">
        òòò
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Sunday.ToString()" IsActive="selectedTab == DayOfWeek.Sunday">
        òòò
    </TabPanel>
</TabsContent>


@code
{
    TextEdit timeStart;
    DayOfWeek selectedTab = DateTime.Now.DayOfWeek;
    TabsContent days;

    private void OnSelectedTab(string tab)
    {
        selectedTab = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), tab);
        days.SelectPanel(tab);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeAsync<object>("renderPickers");
    }



    Data data = new Data();
    LandroidWorxApp.BusinessLogic.Config config = new LandroidWorxApp.BusinessLogic.Config();
    List<TimePlanning_BL> Plannings = new List<TimePlanning_BL>();
    string nextZone = string.Empty;
    string batteryStatus = "empty";
    string bearerToken = string.Empty;
    string serialNumber = string.Empty;
    string broker = string.Empty;
    string cmdInPath = string.Empty;
    string cmdOutPath = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Setup();
        await GetData();
        GetTimePannings();
    }

    public async Task Setup()
    {
        var response = LsClientWeb.Login(new LsClientWeb_LoginRequest()
        {
            ClientSecret = Configuration.GetValue<string>("ClientSecret"),
            GrantType = "password",
            Scope = "*",
            Username = "roberto.gualandris@hotmail.it",
            Password = "ilguala11"
        });

        var products = LsClientWeb.GetProducts(new LsClientWeb_GetProductsRequest() { BearerToken = response.BearerToken });
        bearerToken = response.BearerToken;
        broker = response.BrokerUrl;
        serialNumber = products.Products.First().SerialNo;
        cmdInPath = products.Products.First().Topic.CmdIn;
        cmdOutPath = products.Products.First().Topic.CmdOut;
    }

    public async Task GetData()
    {
        var status = LsClientWeb.GetProductStatus(new LsClientWeb_GetProductStatusRequest() { BearerToken = bearerToken, SerianNumber = serialNumber });
        data = status.Status.Dat;
        config = status.Status.Cfg;
        if (data.Battery.Perc > 90)
            batteryStatus = "full";
        else if (data.Battery.Perc > 60)
            batteryStatus = "three-quarters";
        else if (data.Battery.Perc > 40)
            batteryStatus = "half";
        else if (data.Battery.Perc > 15)
            batteryStatus = "quarter";
        else
            batteryStatus = "empty";

        nextZone = config.MultiZones[0] > 0 ? (config.MultiZonePercs[data.LastZone] + 1).ToString() : "-";
    }

    private void GetTimePannings()
    {
        var response = Manager.GetTimePlannings(new GetTimePlanningsRequest() { Username = "roberto.gualandris@hotmail.it" });
        Plannings = response.Plannings;
    }
}