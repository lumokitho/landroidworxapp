@page "/scheduler"
@using System.Globalization
@using LandroidWorxApp.BusinessLogic
@using Microsoft.Extensions.Configuration
@using uPLibrary.Networking.M2Mqtt;
@using uPLibrary.Networking.M2Mqtt.Messages;
@using LandroidWorxApp.Components;
@inject ILsClientWeb LsClientWeb
@inject IManager Manager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

<Tabs SelectedTabChanged="OnSelectedTab" IsJustified="true" IsPills="true" Class="days mx-n4">
    <Tab Name="@DayOfWeek.Monday.ToString()" IsActive="selectedTab == DayOfWeek.Monday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Monday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Tuesday.ToString()" IsActive="selectedTab == DayOfWeek.Tuesday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Tuesday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Wednesday.ToString()" IsActive="selectedTab == DayOfWeek.Wednesday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Wednesday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Thursday.ToString()" IsActive="selectedTab == DayOfWeek.Thursday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Thursday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Friday.ToString()" IsActive="selectedTab == DayOfWeek.Friday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Friday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Saturday.ToString()" IsActive="selectedTab == DayOfWeek.Saturday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Saturday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Sunday.ToString()" IsActive="selectedTab == DayOfWeek.Sunday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Sunday].ToUpper()</Tab>
</Tabs>


<TabsContent @ref="days">

    <TabPanel Name="@DayOfWeek.Monday.ToString()" IsActive="selectedTab == DayOfWeek.Monday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Monday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }

    </TabPanel>
    <TabPanel Name="@DayOfWeek.Tuesday.ToString()" IsActive="selectedTab == DayOfWeek.Tuesday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Tuesday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Wednesday.ToString()" IsActive="selectedTab == DayOfWeek.Wednesday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Wednesday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Thursday.ToString()" IsActive="selectedTab == DayOfWeek.Thursday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Thursday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Friday.ToString()" IsActive="selectedTab == DayOfWeek.Friday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Friday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Saturday.ToString()" IsActive="selectedTab == DayOfWeek.Saturday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Saturday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Sunday.ToString()" IsActive="selectedTab == DayOfWeek.Sunday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Sunday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>

</TabsContent>

<Row Class="mt-2">
    <Column>
        <Button Color="Color.Info" Clicked="@AddTimeSchedule">Add Time</Button>
        <Button Color="Color.Primary" Clicked="@OnButtonClicked">Save Scheduler</Button>
    </Column>
</Row>


<Modal @ref="validationModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Attention</ModalTitle>
            <CloseButton Clicked="() => validationModal.Hide()" />
        </ModalHeader>
        <ModalBody>
            @modalText;
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="() => validationModal.Hide()">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code
{
    TextEdit timeStart;
    DayOfWeek selectedTab = DateTime.Now.DayOfWeek;
    TabsContent days;
    Modal validationModal;
    string modalText;

    private void OnSelectedTab(string tab)
    {
        selectedTab = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), tab);
        days.SelectPanel(tab);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeAsync<object>("renderPickers");
    }



    Data data = new Data();
    LandroidWorxApp.BusinessLogic.Config config = new LandroidWorxApp.BusinessLogic.Config();
    List<TimePlanning_BL> Plannings = new List<TimePlanning_BL>();
    TimeSchedule test;
    string nextZone = string.Empty;
    string batteryStatus = "empty";
    string bearerToken = string.Empty;
    string serialNumber = string.Empty;
    string broker = string.Empty;
    string cmdInPath = string.Empty;
    string cmdOutPath = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Setup();
        await GetTimePannings();
        await GetData();

    }

    public async Task Setup()
    {
        var response = LsClientWeb.Login(new LsClientWeb_LoginRequest()
        {
            ClientSecret = Configuration.GetValue<string>("ClientSecret"),
            GrantType = "password",
            Scope = "*",
            Username = "roberto.gualandris@hotmail.it",
            Password = "ilguala11"
        });

        var products = LsClientWeb.GetProducts(new LsClientWeb_GetProductsRequest() { BearerToken = response.BearerToken, Username ="roberto.gualandris@hotmail.it" });
        bearerToken = response.BearerToken;
        broker = response.BrokerUrl;
        serialNumber = products.Products.First().SerialNo;
        cmdInPath = products.Products.First().Topic.CmdIn;
        cmdOutPath = products.Products.First().Topic.CmdOut;
    }

    public async Task GetData()
    {
        var status = LsClientWeb.GetProductStatus(new LsClientWeb_GetProductStatusRequest() { BearerToken = bearerToken, SerianNumber = serialNumber });
        data = status.Status.Dat;
        config = status.Status.Cfg;
        if (data.Battery.Perc > 90)
            batteryStatus = "full";
        else if (data.Battery.Perc > 60)
            batteryStatus = "three-quarters";
        else if (data.Battery.Perc > 40)
            batteryStatus = "half";
        else if (data.Battery.Perc > 15)
            batteryStatus = "quarter";
        else
            batteryStatus = "empty";

        nextZone = config.MultiZones[0] > 0 ? (config.MultiZonePercs[data.LastZone] + 1).ToString() : "-";
    }

    public async Task GetTimePannings()
    {
        var response = Manager.GetTimePlannings(new GetTimePlanningsRequest() { Username = "roberto.gualandris@hotmail.it" });
        Plannings = response.Plannings;
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    public void OnButtonClicked()
    {
        if (Plannings.Any(p => p.Duration <= 0))
        {
            modalText = "Duration can not be equal or less then 0";
            validationModal.Show();
            return;
        }
        Manager.SaveTimePlanningsRequest(new SaveTimePlanningsRequest() { Plannings = Plannings, SerialNumber = serialNumber });
        Manager.Test(new SendTimePlanCommandRequest()
        {
            SerialNumber = serialNumber,
            Planning = Plannings.First()
        });
    }

    public void AddTimeSchedule()
    {
        Plannings.Add(new TimePlanning_BL() { DayOfWeek = selectedTab, Username = "roberto.gualandris@hotmail.it", });
    }

    public void DeleteTimeSchedule(TimePlanning_BL time)
    {
        Plannings.Remove(time);
    }


}