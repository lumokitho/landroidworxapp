@page "/scheduler"
@attribute [Authorize]

@using System.Globalization
@using LandroidWorxApp.BusinessLogic
@using Microsoft.Extensions.Configuration
@using uPLibrary.Networking.M2Mqtt;
@using uPLibrary.Networking.M2Mqtt.Messages;
@using LandroidWorxApp.Components;
@inject ILsClientWeb LsClientWeb
@inject IManager Manager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<Tabs SelectedTabChanged="OnSelectedTab" IsJustified="true" IsPills="true" Class="days mx-n4">
    <Tab Name="@DayOfWeek.Monday.ToString()" IsActive="selectedTab == DayOfWeek.Monday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Monday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Tuesday.ToString()" IsActive="selectedTab == DayOfWeek.Tuesday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Tuesday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Wednesday.ToString()" IsActive="selectedTab == DayOfWeek.Wednesday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Wednesday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Thursday.ToString()" IsActive="selectedTab == DayOfWeek.Thursday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Thursday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Friday.ToString()" IsActive="selectedTab == DayOfWeek.Friday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Friday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Saturday.ToString()" IsActive="selectedTab == DayOfWeek.Saturday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Saturday].ToUpper()</Tab>
    <Tab Name="@DayOfWeek.Sunday.ToString()" IsActive="selectedTab == DayOfWeek.Sunday">@CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames[(int)DayOfWeek.Sunday].ToUpper()</Tab>
</Tabs>


<TabsContent @ref="days">

    <TabPanel Name="@DayOfWeek.Monday.ToString()" IsActive="selectedTab == DayOfWeek.Monday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Monday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }

    </TabPanel>
    <TabPanel Name="@DayOfWeek.Tuesday.ToString()" IsActive="selectedTab == DayOfWeek.Tuesday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Tuesday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Wednesday.ToString()" IsActive="selectedTab == DayOfWeek.Wednesday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Wednesday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Thursday.ToString()" IsActive="selectedTab == DayOfWeek.Thursday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Thursday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Friday.ToString()" IsActive="selectedTab == DayOfWeek.Friday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Friday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Saturday.ToString()" IsActive="selectedTab == DayOfWeek.Saturday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Saturday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>
    <TabPanel Name="@DayOfWeek.Sunday.ToString()" IsActive="selectedTab == DayOfWeek.Sunday">
        @foreach (var item in Plannings.Where(p => p.DayOfWeek == DayOfWeek.Sunday).OrderBy(p => p.TimeStart))
        {
            var planning = item;
            <TimeSchedule @key="item.Id" Planning="planning" Config=config DeleteTime="() => DeleteTimeSchedule(planning)" />
        }
    </TabPanel>

</TabsContent>

<Row Class="mt-3">
    <Column ColumnSize="ColumnSize.Is1" Class="align-self-center text-center">
        <span><b>@config.Schedule.Perc</b></span>
    </Column>
    <Column>
        <Field>
            <label for="work-percentage"><b>Work Percentage</b></label>
            <input type="range" class="form-control-range" id="work-percentage" step="10" min="-100" max="100" @bind-value="config.Schedule.Perc" />
        </Field>
    </Column>
</Row>


<Row Class="mt-2">
    <Column>
        <Button Color="Color.Info" Clicked="@AddTimeSchedule">Add Time</Button>
        <Button Color="Color.Success" Clicked="@OnButtonClicked">Save Scheduler</Button>
    </Column>
</Row>


@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    TextEdit timeStart;
    DayOfWeek selectedTab = DateTime.Now.DayOfWeek;
    TabsContent days;


    private void OnSelectedTab(string tab)
    {
        selectedTab = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), tab);
        days.SelectPanel(tab);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeAsync<object>("interop.renderPickers");
    }



    Data data = new Data();
    LandroidWorxApp.BusinessLogic.Config config = new LandroidWorxApp.BusinessLogic.Config();
    List<TimePlanning_BL> Plannings = new List<TimePlanning_BL>();
    TimeSchedule test;

    string bearerToken = string.Empty;
    string serialNumber = string.Empty;
    string broker = string.Empty;
    string username = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        bearerToken = user.Claims.First(c => c.Type == "BearerToken").Value;
        broker = user.Claims.First(c => c.Type == "BrokerUrl").Value;
        username = user.Identity.Name;
        serialNumber = user.Claims.FirstOrDefault(c => c.Type == "SelectedProductSN")?.Value;
        if (string.IsNullOrWhiteSpace(serialNumber))
        {
            NavigationManager.NavigateTo("products");
            return;
        }


        await GetTimePannings();
        await GetData();

    }

    public async Task GetData()
    {
        var status = await LsClientWeb.GetProductStatus(new LsClientWeb_GetProductStatusRequest() { BearerToken = bearerToken, SerianNumber = serialNumber });
        data = status.Status.Dat;
        config = status.Status.Cfg;
    }

    public async Task GetTimePannings()
    {
        var response = Manager.GetTimePlannings(new GetTimePlanningsRequest() { Username = "roberto.gualandris@hotmail.it" });
        Plannings = response.Plannings;
    }


    public async Task OnButtonClicked()
    {
        var interop = new Interop(JSRuntime);
        await interop.Overlay(true);
        if (Plannings.Any(p => p.Duration <= 0))
        {
            await interop.Overlay(false);
            await interop.ShowSwallAlert("warning", "Attention", "Duration can not be equal or less then 0", "OK", null, null);
            return;
        }
        Manager.SaveTimePlanningsRequest(new SaveTimePlanningsRequest() { Plannings = Plannings, SerialNumber = serialNumber, WorkPercentage = config.Schedule.Perc });
        await interop.Overlay(false);
        await interop.ShowSwallAlert("success", "Save Scheduler", "Scheduler saved", "OK", null, null);
    }

    public void AddTimeSchedule()
    {
        Plannings.Add(new TimePlanning_BL() { DayOfWeek = selectedTab, Username = "roberto.gualandris@hotmail.it", });
    }

    public void DeleteTimeSchedule(TimePlanning_BL time)
    {
        Plannings.Remove(time);
    }


}